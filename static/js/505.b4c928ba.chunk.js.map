{"version":3,"file":"static/js/505.b4c928ba.chunk.js","mappings":"sNACA,EAA0B,yBAA1B,EAAyD,qBAAzD,EAAqF,sBAArF,EAAkH,sB,mBCMrGA,EAAUC,EAAAA,MAAW,YAAiD,IAA/CC,EAA8C,EAA9CA,QAEhC,OAAO,iBAAKC,UAAWC,EAAhB,WACH,0BACI,SAAC,KAAD,CAAMC,GAAI,YAAcH,EAAQI,OAAhC,UACI,gBAAKC,IAAK,MAAOC,IAAKN,EAAQO,OAASC,EAClCP,UAAWC,SAGxB,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UAAwB,uBAAIF,EAAQS,cACpC,uBAAIT,EAAQA,mBCZXU,EAAW,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,IAAqC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YACpEI,GAAcC,EAAAA,EAAAA,QAAuB,MAC3C,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAC,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdF,IACA,UAAAH,EAAYM,eAAZ,SAAqBC,eAAe,CAACC,SAAU,cAEpD,CAACZ,KAEG,iBAAKa,MAAO,CAACC,UAAW,OAAQC,OAAQ,SAAUC,SAfnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFR,EAASyB,KAAI,SAACpC,EAASqC,GAAV,OAAkB,SAACvC,EAAD,CAASE,QAASA,GAAcqC,OAChE,gBAAKC,IAAKvB,Q,oBC3BlB,EAAgC,sCAAhC,EAA+E,+BCOlEwB,EAAiB,WAC1B,OAA8BtB,EAAAA,EAAAA,UAAS,IAAvC,eAAOjB,EAAP,KAAgBwC,EAAhB,KACMC,GAAS7B,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAK2B,UAC5CC,GAAWC,EAAAA,EAAAA,MAEXC,EAAqB,WACnB5C,IACA0C,GAASG,EAAAA,EAAAA,IAAY7C,IACrBwC,EAAW,MAUnB,OAAO,iBAAKvC,UAAWC,EAAhB,WACH,SAAC4C,EAAA,EAAD,CAAWC,YAAa,qBACbvB,MAAO,CAACwB,SAAU,KAClBC,MAAOjD,EACPkD,WAVW,SAACtB,GACT,UAAVA,EAAES,KACFO,KASOO,SAAU,SAACvB,GAAD,OAAOY,EAAWZ,EAAEE,cAAcmB,WACvD,SAACG,EAAA,EAAD,CAAQnD,UAAWC,EAAUmD,QAAQ,YAAYC,SAAqB,UAAXb,EAAoBc,QAASX,EAAxF,sB,UCxBKY,EAAO,WAChB,IAAMd,GAAWC,EAAAA,EAAAA,MACXc,GAAS7C,EAAAA,EAAAA,IAAwB,SAAAC,GAAK,OAAIA,EAAM6C,KAAKD,UAS3D,OAPArC,EAAAA,EAAAA,YAAU,WAEN,OADAsB,GAASiB,EAAAA,EAAAA,OACF,WACHjB,GAASkB,EAAAA,EAAAA,UAEd,IAEEH,GACE,4BACH,SAAC/C,EAAD,KACA,SAAC6B,EAAD,QAHgB,SAAC,KAAD,CAAUpC,GAAI,SAAU0D,SAAS,KClBzD,EAA0B,sBCU1B,EAPiB,WAEb,OAAO,gBAAK5D,UAAWC,EAAhB,UACH,SAACsD,EAAD","sources":["webpack://my-app-ts/./src/components/Chat/Messages/Message/Message.module.css?04b2","components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","webpack://my-app-ts/./src/components/Chat/AddMessageForm/AddMessageForm.module.css?2c00","components/Chat/AddMessageForm/AddMessageForm.tsx","components/Chat/Chat.tsx","components/Chat/Chat.module.css","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__TXeiQ\",\"ava\":\"Message_ava__+rO5E\",\"text\":\"Message_text__xulOd\",\"name\":\"Message_name__pLRe+\"};","import {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {ChatMessageAPIType} from \"../../../../api/chat-api\";\r\nimport s from \"./Message.module.css\"\r\nimport noAva from \"../../../../assets/images/naAvatar.png\"\r\n\r\n\r\nexport const Message = React.memo(({message}: { message: ChatMessageAPIType }) => {\r\n\r\n    return <div className={s.message}>\r\n        <div >\r\n            <Link to={'/profile/' + message.userId}>\r\n                <img alt={'ava'} src={message.photo || noAva}\r\n                     className={s.ava}/>\r\n            </Link>\r\n        </div>\r\n        <div className={s.text}>\r\n            <div className={s.name}><b>{message.userName}</b></div>\r\n            <p>{message.message}</p>\r\n        </div>\r\n    </div>\r\n})","import {useAppSelector} from \"../../../redux/reduxStore\";\r\nimport {ChatMessageAPIType} from \"../../../api/chat-api\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport { Message } from \"./Message/Message\";\r\n\r\n\r\nexport const Messages = () => {\r\n    const messages = useAppSelector<ChatMessageAPIType[]>(state => state.chat.messages)\r\n    const messagesRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{overflowY: 'auto', height: '500px'}} onScroll={scrollHandler}>\r\n        {messages.map((message, key) => <Message message={message} key={key}/>)}\r\n        <div ref={messagesRef}></div>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"containerForm\":\"AddMessageForm_containerForm__86pl-\",\"button\":\"AddMessageForm_button__Wwak8\"};","import {Button, TextField} from \"@mui/material\";\r\nimport {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../../redux/ChatReducer\";\r\nimport {useAppSelector} from \"../../../redux/reduxStore\";\r\nimport s from \"./AddMessageForm.module.css\"\r\n\r\n\r\nexport const AddMessageForm = () => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useAppSelector(state => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (message) {\r\n            dispatch(sendMessage(message))\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    const onKeyEventHandler = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            sendMessageHandler()\r\n        }\r\n    }\r\n\r\n    return <div className={s.containerForm}>\r\n        <TextField placeholder={'Enter your message'}\r\n                   style={{maxWidth: 400}}\r\n                   value={message}\r\n                   onKeyPress={onKeyEventHandler}\r\n                   onChange={(e) => setMessage(e.currentTarget.value)}/>\r\n        <Button className={s.button} variant=\"contained\" disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\r\n    </div>\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useEffect} from \"react\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../redux/ChatReducer\";\r\nimport { Messages } from \"./Messages/Messages\";\r\nimport { AddMessageForm } from \"./AddMessageForm/AddMessageForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useAppSelector } from \"../../redux/reduxStore\";\r\n\r\nexport const Chat = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useAppSelector<boolean>(state => state.auth.isAuth)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    if (!isAuth) return <Navigate to={'/login'} replace={true}/>\r\n    return <div>\r\n        <Messages/>\r\n        <AddMessageForm/>\r\n    </div>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Chat_wrapper__99XCS\"};","import {Chat} from \"./Chat\";\r\nimport s from \"./Chat.module.css\"\r\n\r\n\r\nconst ChatPage = () => {\r\n\r\n    return <div className={s.wrapper}>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Message","React","message","className","s","to","userId","alt","src","photo","noAva","userName","Messages","messages","useAppSelector","state","chat","messagesRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","style","overflowY","height","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","key","ref","AddMessageForm","setMessage","status","dispatch","useDispatch","sendMessageHandler","sendMessage","TextField","placeholder","maxWidth","value","onKeyPress","onChange","Button","variant","disabled","onClick","Chat","isAuth","auth","startMessagesListening","stopMessagesListening","replace"],"sourceRoot":""}